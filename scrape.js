import puppeteer from "puppeteer";
import fs from "fs";

(async () => {
    // 1. M·ªü tr√¨nh duy·ªát
    const browser = await puppeteer.launch({
        headless: false,
        slowwmo: 500, // Gi·∫£m t·ªëc ƒë·ªô ƒë·ªÉ d·ªÖ quan s√°t
    });
    const page = await browser.newPage();
    console.log('m·ªü tr√¨nh duy·ªát');
    // 2. M·ªü Google
    await page.goto("https://mybk.hcmut.edu.vn/dkmh/dangKyMonHocForm.action");

    // 2. Nh·∫≠p username
    await page.type("#username", "phuong.tran206");

    // 3. Nh·∫≠p password
    await page.type("#password", "phuongphuongphuong");

    // 4. Click n√∫t ƒëƒÉng nh·∫≠p
    await page.click("input[type='submit']");

    //ƒëƒÉng nh·∫≠p th·ªß c√¥ng
    await page.waitForSelector(".content-wrapper")

    //t√¨m √¥ ƒë·ªÉ b·∫•m 
    await page.click(".table > tbody > tr:nth-child(3)");

    //Ch·ªù trang t·∫£i xong
    await page.waitForSelector(".content-wrapper")
    //debug
    page.on("console", msg => {
    console.log("üìú Browser log:", msg.text());
    });

    await page.evaluate(() => {
    console.log("Hello from browser!");
    });
    //ch·ªù c√≥ d·ªØ li·ªáu
    await page.waitForSelector(".panel-default", { timeout: 10000 });
    // l·∫•y d·ªØ li·ªáu 
    const objects = await page.evaluate(() => {
        const panels = document.querySelectorAll(".panel-default");
        let result = [];

        panels.forEach(panel => {
            let classObj = {};
            classObj.class = {}; // Kh·ªüi t·∫°o object class

            // L·∫•y m√£ v√† t√™n m√¥n
            const titleText = panel.querySelector(".col-md-9")?.innerText.trim() || "";
            const [codeRaw, nameRaw] = titleText.split(" - ");
            classObj.code = codeRaw.trim();
            classObj.name = nameRaw?.trim() || "";

            // L·∫•y m√£ l·ªõp (VD: L05)
            const classCode = panel.querySelector(".col-md-12 > table > tbody > tr:nth-child(2) > td.item_list:nth-child(1)")?.innerText.trim() || "";

            // Kh·ªüi t·∫°o m·∫£ng cho l·ªõp n√†y
            classObj.class[classCode] = [];

            // L·∫•y c√°c d√≤ng l·ªãch h·ªçc
            const timeRows = panel.querySelectorAll(".table tr:not(.bg)");
            timeRows.forEach(row => {
                const cols = row.querySelectorAll("td");
                if (cols.length >= 6) {
                    const thuText = cols[0].innerText.trim();
                    const tietText = cols[1].innerText.trim();
                    const tuanText = cols[5].innerText.trim();

                    if (thuText && tietText && tuanText) {
                        // Chuy·ªÉn "Th∆∞ÃÅ 6" ‚Üí 6
                        const day = parseInt(thuText.match(/\d+/)?.[0] || "0");

                        // Chuy·ªÉn "- - - - - - 7 8 9 - - - - - - -" ‚Üí [7,8,9]
                        const lesson = tietText.split(/\s+/).filter(v => /^\d+$/.test(v)).map(Number);

                        // Chuy·ªÉn "12345678-0123456--------------" ‚Üí m·∫£ng tu·∫ßn
                        let week = [];
                        tuanText.split("").forEach((char, index) => {
                            if (/\d/.test(char)) {
                                week.push(index + 1); // Tu·∫ßn b·∫Øt ƒë·∫ßu t·ª´ 1
                            }
                        });

                        // Th√™m v√†o m·∫£ng l·ªõp
                        classObj.class[classCode].push({
                            day,
                            lesson,
                            week
                        });
                    }
                }
            });

            result.push(classObj);
        });

        return result;
    });


    console.log('in k·∫øt qu·∫£');
    //console.log(JSON.stringify(objects, null, 2));
    //b·∫•m n√∫t ƒëƒÉng k√Ω, hi·ªáu ch·ªânh
    await page.click("#div-KetQuaDKViewResponse > div:nth-of-type(2) > button:nth-of-type(2)");

    //ch·ªù hi·ªÉn th·ªã
    await page.waitForSelector("#txtMSMHSearch");
    //l·∫∑p qua c√°c m√¥n
    // L·∫∑p qua t·ª´ng m√¥n tu·∫ßn t·ª±
    for (let i = 0; i < objects.length; i++) {
        const code = objects[i].code;

        console.log(`üîç ƒêang x·ª≠ l√Ω m√¥n ${code} (${i + 1}/${objects.length})`);

        // Nh·∫≠p m√£ m√¥n
        await page.waitForSelector("#txtMSMHSearch");
        await page.click("#txtMSMHSearch", { clickCount: 3 });
        await page.keyboard.press("Backspace");
        await page.type("#txtMSMHSearch", code, { delay: 50 });
        await page.keyboard.press("Enter");

        // Ch·ªù cho ƒë·∫øn khi b·∫£ng k·∫øt qu·∫£ c√≥ ch·ª©a m√£ m√¥n n√†y
        await page.waitForFunction(
            (code) => {
                const cell = document.querySelector("#tblMonHocMoLop tbody tr:nth-of-type(2) td:nth-of-type(3)");
                return cell && cell.innerText.trim() === code;
            },
            {},
            code
        );

        // Click v√†o m√¥n ƒë·ªÉ m·ªü b·∫£ng l·ªõp
        await page.click("#tblMonHocMoLop tbody tr:nth-of-type(2)");

        // Ch·ªù b·∫£ng .gridTable c·ªßa m√¥n n√†y load xong
        await page.waitForFunction(() => {
            const table = document.querySelector(".gridTable");
            return table && table.querySelectorAll("tbody > tr").length > 0;
        });

        // L·∫•y d·ªØ li·ªáu l·ªõp m·ªõi
        const newClasses = await page.evaluate(() => {
            const table = document.querySelector(".gridTable");
            if (!table) return {};

            const rows = table.querySelectorAll("tbody > tr");
            let result = {};

            for (let r = 0; r < rows.length; r++) {
                const firstCell = rows[r].querySelector("td.item_list");
                if (firstCell && firstCell.colSpan !== 9 && firstCell.innerText.trim() !== "") {
                    const classCode = firstCell.innerText.trim();

                    if (!/^L\d+$/i.test(classCode)) continue; // Ch·ªâ l·∫•y m√£ l·ªõp b·∫Øt ƒë·∫ßu b·∫±ng L

                    const dksiSo = rows[r].querySelector("td:nth-child(2)")?.innerText.trim() || "";
                    const [dk, siSo] = dksiSo.split("/").map(s => parseInt(s) || 0);
                    if (dk >= siSo) continue; // B·ªè l·ªõp ƒë·∫ßy

                    result[classCode] = [];

                    const scheduleRow = rows[r + 1];
                    const innerTable = scheduleRow?.querySelector(".table");
                    if (innerTable) {
                        const timeRows = innerTable.querySelectorAll("tr:not(:first-child)");
                        timeRows.forEach(tr => {
                            const tds = tr.querySelectorAll("td");
                            if (tds.length >= 6) {
                                const thuText = tds[0].innerText.trim();
                                const tietText = tds[1].innerText.trim();
                                const tuanText = tds[5].innerText.trim();

                                const day = parseInt(thuText.match(/\d+/)?.[0] || "0");
                                const lesson = tietText.split(/\s+/).filter(v => /^\d+$/.test(v)).map(Number);
                                let week = [];
                                tuanText.split("").forEach((char, index) => {
                                    if (/\d/.test(char)) week.push(index + 1);
                                });

                                result[classCode].push({ day, lesson, week });
                            }
                        });
                    }
                }
            }
            return result;
        });

        // G·ªôp l·ªõp m·ªõi v√†o m√¥n hi·ªán t·∫°i
        for (const [classCode, schedule] of Object.entries(newClasses)) {
            if (!(classCode in objects[i].class)) {
                objects[i].class[classCode] = schedule;
            }
        }

        console.log(`‚úÖ ƒê√£ th√™m ${Object.keys(newClasses).length} l·ªõp m·ªõi cho m√¥n ${code}`);
    }
    console.log(JSON.stringify(objects, null, 2));

    //h√†m ki·ªÉm tra xung ƒë·ªôt
    function hasConflict(schedule1, schedule2) {
        for (const s1 of schedule1) {
            for (const s2 of schedule2) {
                if (s1.day === s2.day) {
                    // Ki·ªÉm tra tr√πng ti·∫øt
                    const lessonOverlap = s1.lesson.some(l => s2.lesson.includes(l));
                    if (lessonOverlap) {
                        // Ki·ªÉm tra tr√πng tu·∫ßn
                        const weekOverlap = s1.week.some(w => s2.week.includes(w));
                        if (weekOverlap) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    //sinh t·ªï h·ª£p
    function generateCombinations(subjects) {
        const results = [];

        function backtrack(index, currentCombo) {
            if (index === subjects.length) {
                results.push([...currentCombo]);
                return;
            }

            const subject = subjects[index];
            for (const [classCode, schedule] of Object.entries(subject.class)) {
                let conflict = false;
                for (const chosen of currentCombo) {
                    if (hasConflict(chosen.schedule, schedule)) {
                        conflict = true;
                        break;
                    }
                }
                if (!conflict) {
                    currentCombo.push({ code: subject.code, name: subject.name, classCode, schedule });
                    backtrack(index + 1, currentCombo);
                    currentCombo.pop();
                }
            }
        }

        backtrack(0, []);
        return results;
    }

    //render html
    function renderTable(combo) {
        const colors = ["#f4cccc", "#d9ead3", "#c9daf8", "#fff2cc", "#ead1dc", "#d0e0e3"];
        let html = `<table border="1" style="border-collapse:collapse;text-align:center;">
            <tr>
                <th>Ti·∫øt</th>
                <th>Th·ª© 2</th><th>Th·ª© 3</th><th>Th·ª© 4</th><th>Th·ª© 5</th><th>Th·ª© 6</th><th>Th·ª© 7</th><th>Th·ª© 8</th>
            </tr>`;

        for (let lesson = 1; lesson <= 15; lesson++) {
            html += `<tr><td>${lesson}</td>`;
            for (let day = 2; day <= 8; day++) {
                const entry = combo.find(c => c.schedule.some(s => s.day === day && s.lesson.includes(lesson)));
                if (entry) {
                    html += `<td style="background:${colors[combo.indexOf(entry) % colors.length]}">
                        ${entry.name}<br>${entry.classCode}
                    </td>`;
                } else {
                    html += `<td></td>`;
                }
            }
            html += `</tr>`;
        }

        html += `</table><br>`;
        return html;
    }
    //xu·∫•t file
    const combos = generateCombinations(objects);

    let htmlOutput = "<html><body>";
    combos.forEach(combo => {
        htmlOutput += renderTable(combo);
    });
    htmlOutput += "</body></html>";

    // L∆∞u file
    fs.writeFileSync("timetable.html", htmlOutput, "utf-8");
    console.log(`‚úÖ ƒê√£ t·∫°o ${combos.length} t·ªï h·ª£p v√†o timetable.html`);

    fs.writeFileSync("output.json", JSON.stringify(objects, null, 4), "utf8");

    // console.log("‚úÖ ƒê√£ t·∫°o file output.html");
    await browser.close();
})();
